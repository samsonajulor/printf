.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "" "" "" "" ""
.hy
.PP
[IMAGE: PRINTF(1) (https://user-images.githubusercontent.com/97880395/178113082-7681e4c4-4cc0-4d03-b386-b4e50f6c8469.png)]
.PP
This README file have the fully description of our first group project
in holberton-school, the project is about the implementation of printf
function, it means we gonna write our own printf function.
Below you\[cq]ll find how printf works, and how to design the proper
formatting specification for any occasion Prototype of printf function
int _printf(const char *format, \&...); Returns: the number of
characters printed (excluding the null byte used to end output to
strings
.SS Usage && Examples
.PP
Include main.h Call _printf, passing a formatted string with any format
specifiers and optional arguments Upon success, it writes desired output
to stdout Upon error, it returns -1 If NULL is passed in as a string
argument, it prints (null) Format Specifier.
.PP
To use the _printf function you simply need to compile all files .c
including the header holberton.h with a main function.
.IP
.nf
\f[C]
\[aq]#include \[dq]main.h\[dq]

int main(void) { _printf(\[dq]let\[aq]s print hello world!\[dq]);

return (0); }
\f[R]
.fi
.PP
Compilation:
.IP
.nf
\f[C]
$ gcc *.c -o
\f[R]
.fi
.PP
Output:
.IP
.nf
\f[C]
let\[aq]s print hello world!
\f[R]
.fi
.PP
You can do much more, by combining specifiers like string or integer.
.SS Files
.PP
Below a list of the used files during project:
.IP \[bu] 2
[_printf.c] - produces output according to a format.
.IP \[bu] 2
[get_printf.c] - containing functions for specifiers _putchar.c.
.IP \[bu] 2
[function.c] - containing function that writes a char to stdout.
.IP \[bu] 2
[main.h] - header file with function prototypes and struct for
specifiers.
.SS Authors
.PP
\f[B]Samson Ajulor\f[R] + (https://github.com/samsonajulor)
.PP
\f[B]Onifade Olatunde\f[R] + (https://github.com/holatunde)
